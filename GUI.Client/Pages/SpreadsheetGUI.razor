@* 
  <file>SpreadsheetGUI.razor</file>
  <company>UofU-CS3500</company>
  <copyright>Copyright (c) 2024 UofU-CS3500. All rights reserved.</copyright>
  <authors>LAN QUANG HUYNH and Tiancheng Li</authors>
  <date>10/24/2024</date>
  <summary>
    This file contains the graphical user interface for the Spreadsheet application,
    developed as part of the CS 3500 course at the University of Utah.
    It provides the main Blazor page that allows users to interact with a spreadsheet
    through basic operations like cell editing, saving, loading, and clearing data.
    The file defines the HTML structure, CSS styling, and Blazor C# code for rendering
    and handling events in the spreadsheet GUI.
  </summary>
*@


@page "/spreadsheet"
@rendermode InteractiveAuto
@inject IJSRuntime JS  // <remarks> Allows the "communication"/use of javascript </remarks>
@inject NavigationManager Navigator

@namespace SpreadsheetNS  

@using System.Diagnostics

<NavigationLock ConfirmExternalNavigation="true"
                OnBeforeInternalNavigation="OnBeforeLeavePage" />

<PageTitle>Starter Code</PageTitle>

<h1>Simple SpreadSheet GUI @(false ? "*" : "")</h1>

@* <remarks> Example of how to have two pages or an "alert" GUI. </remarks> *@
@if (SaveGUIView)
{
    <label for="SavefileName">Name:</label>
    <input id="SaveFileName" @bind="SaveFileName" type="text">

    <br/>

    <button class="btn btn-primary" @onclick="HandleSaveFile">Save</button>
    <button class="btn btn-primary" @onclick="() => ShowHideSaveGUI(false)">Cancel</button>
}
else
{
    <div id="toolbar">
        <div>
            <label for="SelectedCell">Selected Cell:</label>
            <input name="SelectedCell" id="SelectedCell" value="@curCell" readonly />

            <label for="SelectedValue">Value:</label>
            <input name="SelectedValue" id="SelectedValue" value="@CellsBackingStore[curRow,curCol]" readonly />

            <label for="FormulaContent">Contents:</label>
            <input name="FormulaContent" id="FormulaContent" @ref="FormulaContentEditableInput" value="@InputWidgetBackingStore" @onchange="ChangeSpreadsheetCellValue" />
        </div>
    </div>

    <div class="container" style="cursor: pointer;">
        <div class="table-container">
            <div class="scrollable">
                <table class="table table-bordered">
                    <thead>
                        <tr class="fixed-header">
                            <th scope="col">&nbsp;</th>
                            @for ( int col = 0; col < inputCols; col++ )
                            {
                                <th scope="col">@Alphabet[col]</th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @for ( int row = 0; row < inputRows; row++ )
                        {
                            <tr style="padding:0px !important;">
                                <th style="padding:0px !important;" scope="row" class="fixed-column">@(row + 1)</th>
                                @for ( int col = 0; col < inputCols; col++ )
                                {
                                    int r = row;
                                    int c = col;
                                    <td class="@CellsClassBackingStore[r,c]"  @onclick="() => FocusMainInput(r,c)">
                                        <span title="@CellsBackingStore[r,c] "class="SpreadsheetCell">@CellsBackingStore[r, c]</span>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="FileMenu">
        <h2>File Menu</h2>
        <div id="FileHandlers">
            <button class="btn btn-primary" @onclick="HandleClear">Clear</button>
            <button class="btn btn-primary" @onclick="() => ShowHideSaveGUI(true)">Save</button>
            <div id="hideUglyWidget">
                <InputFile id="inputwidget" name="abc" class="custom-input" type="file" OnChange="HandleLoadFile" />
            </div>
            <label for="inputwidget" class="btn btn-primary">Load</label>
            <br/>

            <label for="RowsInput"> Number of Rows: </label>
            <input name="RowsInput" id="RowsInput" placeholder=@inputRows min="1" max="100" @onchange="newInputRows" />
            <label for="ColsInput"> Number of Cols: </label>
            <input name="ColsInput" id="ColsInput" placeholder=@inputCols min="1" max="26" @onchange="newInputCols" />
        </div>
    </div>
}

@code
{
    // <remark> 
    //   The code in this section should be 100% GUI related.  Otherwise
    //   place the code in the .cs file.
    // </remark>

    private int curRow = 0;

    private int curCol = 0;

    private string curCell = "A1";

    /// <summary>
    ///   Direct reference to the html element (so we can focus it).
    /// </summary>
    private ElementReference FormulaContentEditableInput;

    /// <summary>
    ///   The value of the main input widget where users type
    ///   their formulas and numbers and strings.
    /// </summary>
    private string InputWidgetBackingStore = "";

    /// <summary>
    ///   The name of the file that we want to download to.
    /// </summary>
    private string SaveFileName = "Spreadsheet.sprd";

    /// <summary>
    ///   When a cell is clicked on, put the focus on the main
    ///   widget and update the toolbar.
    /// </summary>
    /// <param name="row"></param>
    /// <param name="col"></param>
    private void FocusMainInput( int row, int col )
    {
        UpDatedRowColCell(row, col);
        UpdateToolbar();
        HighlightCell(row, col);

        FormulaContentEditableInput.FocusAsync(); // <remarks> move focus back to input widget. </remarks>
    }

    /// <summary>
    ///   Make the value and content display/input of the tool bar match the
    ///   spreadsheet.
    /// </summary>
    private void UpdateToolbar()
    {
        InputWidgetBackingStore =TurnContenCellSameAsSetContent(curRow, curCol);;

        StateHasChanged();
    }

    /// <summary>
    ///   Outline the current cell. erase outlines from everyone else.
    /// </summary>
    /// <param name="theRow">the cell's row.</param>
    /// <param name="theCol">the cell's col.</param>
    private void HighlightCell(int theRow, int theCol)
    {
        for (int row = 0; row < inputRows; row++)
        {
            for (int col = 0; col < inputCols; col++)
            {
                CellsClassBackingStore[row, col] = string.Empty;
            }
        }

        UpDatedRowColCell(theRow, theCol);
        CellsClassBackingStore[theRow, theCol] = "selected";
    }

    /// <summary>
    ///   When the header widget for cell contents is changed, update
    ///   the spreadsheet.
    /// </summary>
    /// <param name="eventArgs"></param>
    private void ChangeSpreadsheetCellValue( ChangeEventArgs eventArgs )
    {

        string newInput = eventArgs.Value?.ToString() ?? "oops";
        InputWidgetBackingStore = newInput;

        HandleUpdateCellInSpreadsheet( newInput, curRow, curCol );

        UpdateToolbar();
    }

    /// <summary>
    ///   What to do before the browser is allowed to leave the page.
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    private async Task OnBeforeLeavePage( LocationChangingContext context )
    {
        if (HasSpreadSheetChanged())
        {
            var isConfirmed = await JS.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to navigate away?");

            if (!isConfirmed)
            {
                context.PreventNavigation();
            }
        }
    }

    /// <summary>
    /// Change this.inputRows to a new row that the user clicked.
    /// </summary>
    /// <param name="eventArgs">A event that user click a new row.</param>
    private void newInputRows(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value?.ToString(), out int newRows) && newRows >= 1 && newRows <= 100)
        {
            // If valid, update inputRows
            inputRows = newRows;
        }
    }

    /// <summary>
    /// Change this.inputCols to a new col that the user clicked.
    /// </summary>
    /// <param name="eventArgs"> event that user click a new colunm.</param>
    private void newInputCols(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value?.ToString(), out int newCols) && newCols >= 1 && newCols <= 100)
        {
            // If valid, update inputCols
            inputCols = newCols;
        }
    }

    /// <summary>
    /// Make the cell that user clicked as curCell.
    /// </summary>
    /// <param name="row">the row user clicked.</param>
    /// <param name="col">the colunm user clicked.</param>
    private void UpDatedRowColCell(int row, int col)
    {
        curRow = row;
        curCol = col;
        curCell = CellNameFromRowCol(row, col);
    }

}
