@*
  <file>SpreadsheetGUI.razor</file>
  <company>UofU-CS3500</company>
  <copyright>Copyright (c) 2024 UofU-CS3500. All rights reserved.</copyright>
  <authors>LAN QUANG HUYNH and Tiancheng Li</authors>
  <date>10/24/2024</date
  Author:    Lan Quang Huynh
  Partner:   Tiancheng Li
  Date:      10-25-2024
  Course:    CS 3500, University of Utah, School of Computing
  Copyright: CS 3500 and Tiancheng Li - This work may not
            be copied for use in Academic Coursework.

  We, Tiancheng Li and Lan Quang Huynh, certify that we wrote this code from scratch and
  did not copy it in part or whole from another source.  All
  references used in the completion of the assignments are cited
  in our README file.



  <summary>
    This file contains the graphical user interface for the Spreadsheet application,
    developed as part of the CS 3500 course at the University of Utah.
    It provides the main Blazor page that allows users to interact with a spreadsheet
    through basic operations like cell editing, saving, loading, and clearing data.
    The file defines the HTML structure, CSS styling, and Blazor C# code for rendering
    and handling events in the spreadsheet GUI.
  </summary>
*@


@page "/spreadsheet"
@rendermode InteractiveAuto
@inject IJSRuntime JS  // <remarks> Allows the "communication"/use of javascript </remarks>
@inject NavigationManager Navigator

@namespace SpreadsheetNS

@using System.Diagnostics

<NavigationLock ConfirmExternalNavigation="true"
                OnBeforeInternalNavigation="OnBeforeLeavePage" />

<PageTitle>Starter Code</PageTitle>

<h1>Simple SpreadSheet GUI @(false ? "*" : "")</h1>

@* <remarks> Example of how to have two pages or an "alert" GUI. </remarks> *@
@if (SaveGUIView)
{
    <label for="SavefileName">Name:</label>
    <input id="SaveFileName" @bind="FileSaveName" type="text">

    <br />

    <button class="btn btn-primary" @onclick="HandleSaveFile">Save</button>
    <button class="btn btn-primary" @onclick="() => ShowHideSaveGUI(false)">Cancel</button>
}
else
{
    <div id="toolbar">
        <div>
            <label for="SelectedCell">Selected Cell:</label>
            <input name="SelectedCell" id="SelectedCell" value="@curCell" readonly />

            <label for="SelectedValue">Value:</label>
            <input name="SelectedValue" id="SelectedValue" value="@CellsBackingStore[curRow,curCol]" readonly />

            <label for="FormulaContent">Contents:</label>
            <input name="FormulaContent" id="FormulaContent" @ref="FormulaContentEditableInput" value="@InputWidgetBackingStore" @onchange="ChangeSpreadsheetCellValue" />
            <button class="btn btn-secondary" @onclick="ToggleDarkMode">
                @(isDarkMode ? "Switch to Light Mode" : "Switch to Dark Mode")
            </button>
        </div>
    </div>

    <div class="container" id="spreadsheet-container"
         style="cursor: pointer; background-color: @(isDarkMode ? "#2e2e2e" : "white"); color: @(isDarkMode ? "white" : "black");">
        <div class="table-container">
            <div class="scrollable">
                <table class="table table-bordered">
                    <thead>
                        <tr class="fixed-header">
                            <th scope="col">&nbsp;</th>
                            @for (int col = 0; col < InputCols; col++)
                            {
                                <th scope="col" style="background-color: @(isDarkMode ? "#4e4e4e" : "white"); color: @(isDarkMode ? "white" : "black");">
                                    @Alphabet[col]
                                </th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @for (int row = 0; row < InputRows; row++)
                        {
                            <tr style="padding:0px !important;">
                                <th style="padding:0px !important;" scope="row" class="fixed-column">@(row + 1)</th>
                                @for (int col = 0; col < InputCols; col++)
                                {
                                    int r = row;
                                    int c = col;
                                    bool isSelected = r == curRow && c == curCol;
                                    if (isSelected && isEditingCell)
                                    {
                                        <td class="@CellsClassBackingStore[r, c]"
                                            @onclick="() => FocusMainInput(r, c)"
                                            style="background-color: @(isDarkMode ? "#3b3b3b" : "white"); color: @(isDarkMode ? "white" : "black");">
                                            <input type="text"
                                                   class="cell-input"
                                                   value="@InputWidgetBackingStore"
                                                   @onchange="ChangeSpreadsheetCellValue"
                                                   @onkeydown="HandleCellInputKeyDown"
                                                   @ref="currentEditingCellInput"
                                                   style="width: 100%; height: 100%; background-color: transparent; color: inherit;" />
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="@CellsClassBackingStore[r, c]"
                                            value="@InputWidgetBackingStore"
                                            @onclick="() => FocusMainInput(r, c)"
                                            @ondblclick="() => EnableCellEditing(r, c)"
                                            style="background-color: @(isDarkMode ? "#3b3b3b" : "white"); color: @(isDarkMode ? "white" : "black");">
                                            <span title="@CellsBackingStore[r, c]" class="SpreadsheetCell">
                                                @CellsBackingStore[r, c]
                                            </span>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="FileMenu">
        <h2>File Menu</h2>
        <div id="FileHandlers">
            <button class="btn btn-primary" @onclick="HandleClear">Clear</button>
            <button class="btn btn-primary" @onclick="() => ShowHideSaveGUI(true)">Save</button>
            <div id="hideUglyWidget">
                <InputFile id="inputwidget" name="abc" class="custom-input" type="file" OnChange="HandleLoadFile" />
            </div>
            <label for="inputwidget" class="btn btn-primary">Load</label>
            <br />

            <label for="RowsInput"> Number of Rows: </label>
            <input name="RowsInput" id="RowsInput" placeholder=@InputRows min="1" max="100" @bind="InputRows" />
            <label for="ColsInput"> Number of Cols: </label>
            <input name="ColsInput" id="ColsInput" placeholder=@InputCols min="1" max="26" @bind="InputCols" />
        </div>
    </div>
}

@code
{
    // <remark>
    //   The code in this section should be 100% GUI related.  Otherwise
    //   place the code in the .cs file.
    // </remark>

    /// <summary>
    /// Indicates whether the spreadsheet is currently in dark mode.
    /// </summary>
    private bool isDarkMode = false;

    /// <summary>
    ///   Direct reference to the html element (so we can focus it).
    /// </summary>
    private ElementReference FormulaContentEditableInput;

    /// <summary>
    ///   The value of the main input widget where users type
    ///   their formulas and numbers and strings.
    /// </summary>
    private string InputWidgetBackingStore = "";

    /// <summary>
    ///   When a cell is clicked on, put the focus on the main
    ///   widget and update the toolbar.
    /// </summary>
    /// <param name="row"></param>
    /// <param name="col"></param>
    private void FocusMainInput(int row, int col)
    {
        if (curRow != row || curCol != col)
        {
            DisableCellEditing();
        }
        UpDatedRowColCell(row, col);
        UpdateToolbar();
        HighlightCell(row, col);

        if (!isEditingCell)
        {
            FormulaContentEditableInput.FocusAsync();
        }
    }

    /// <summary>
    ///   Make the value and content display/input of the tool bar match the
    ///   spreadsheet.
    /// </summary>
    private void UpdateToolbar()
    {
        InputWidgetBackingStore = TurnContenCellSameAsSetContent(curRow, curCol); ;

        StateHasChanged();
    }

    /// <summary>
    ///   Outline the current cell. erase outlines from everyone else.
    /// </summary>
    /// <param name="theRow">the cell's row.</param>
    /// <param name="theCol">the cell's col.</param>
    private void HighlightCell(int theRow, int theCol)
    {
        for (int row = 0; row < InputRows; row++)
        {
            for (int col = 0; col < InputCols; col++)
            {
                CellsClassBackingStore[row, col] = string.Empty;
            }
        }

        UpDatedRowColCell(theRow, theCol);
        CellsClassBackingStore[theRow, theCol] = "selected";
    }

    /// <summary>
    ///   When the header widget for cell contents is changed, update
    ///   the spreadsheet.
    /// </summary>
    /// <param name="eventArgs"></param>
    private void ChangeSpreadsheetCellValue(ChangeEventArgs eventArgs)
    {

        string newInput = eventArgs.Value?.ToString() ?? "oops";
        InputWidgetBackingStore = newInput;

        HandleUpdateCellInSpreadsheet(newInput, curRow, curCol);

        UpdateToolbar();
    }

    /// <summary>
    ///   What to do before the browser is allowed to leave the page.
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    private async Task OnBeforeLeavePage(LocationChangingContext context)
    {
        if (HasSpreadSheetChanged())
        {
            var isConfirmed = await JS.InvokeAsync<bool>(
                "confirm",
                "Are you sure you want to navigate away?");

            if (!isConfirmed)
            {
                context.PreventNavigation();
            }
        }
    }

    /// <summary>
    /// Toggle the dark mode theme.
    /// </summary>
    private void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;

        StateHasChanged();
    }

    /// <summary>
    /// Handles keyboard input when editing a cell directly in the spreadsheet.
    /// </summary>
    /// <param name="e">Keyboard event arguments that contain information about the pressed key.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task HandleCellInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            DisableCellEditing();
        }
        else
        {
            await currentEditingCellInput.FocusAsync();
        }
    }
}
